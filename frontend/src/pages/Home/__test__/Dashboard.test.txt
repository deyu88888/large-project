// failing

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import { vi } from 'vitest';
import Dashboard from '../Dashboard';
import '@testing-library/jest-dom';

// Create mockNavigate BEFORE using it in mocks
const mockNavigate = vi.fn();

// Mock react-router-dom hooks
vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom');
  return {
    ...actual,
    useNavigate: () => mockNavigate
  };
});

// Mock the WebSocketManager hook
vi.mock('../../hooks/useWebSocketManager', () => {
  // Define the CONNECTION_STATES inside the mock factory
  const CONNECTION_STATES = {
    DISCONNECTED: 'disconnected',
    AUTHENTICATED: 'authenticated'
  };
  
  return {
    useWebSocketManager: () => ({
      status: CONNECTION_STATES.AUTHENTICATED,
      connect: vi.fn()
    }),
    CONNECTION_STATES
  };
});

// Mock the WebSocketChannel hook with mocked methods
vi.mock('../../hooks/useWebSocketChannel', () => ({
  useWebSocketChannel: (channel: string) => {
    if (channel === 'dashboard/popular-societies') {
      return {
        data: [
          { id: 1, name: 'Chess Club', total_members: 150, popularity_score: 98 },
          { id: 2, name: 'Debate Society', total_members: 120, popularity_score: 92 }
        ],
        loading: false,
        error: null,
        refresh: vi.fn()
      };
    } else if (channel === 'dashboard/upcoming-events') {
      return {
        data: [
          { id: 1, title: 'Event 1', date: '2025-03-10', startTime: '14:00:00', duration: '02:00:00' },
          { id: 2, title: 'Event 2', date: '2025-03-12', startTime: '16:30:00', duration: '01:30:00' }
        ],
        loading: false,
        error: null,
        refresh: vi.fn()
      };
    }
    return { data: [], loading: false, error: null, refresh: vi.fn() };
  }
}));

// Mock SocietyCard and EventCard components
vi.mock('../../components/SocietyCard', () => ({
  default: ({ society, onViewSociety }) => (
    <div 
      data-testid={`society-card-${society.id}`}
      onClick={() => onViewSociety(society.id)}
    >
      {society.name}
    </div>
  )
}));

vi.mock('../../components/EventCard', () => ({
  default: ({ event, onViewEvent }) => (
    <div 
      data-testid={`event-card-${event.id}`}
      onClick={() => onViewEvent(event.id)}
    >
      {event.title}
    </div>
  )
}));

// Mock theme tokens
vi.mock('../theme/theme', () => ({
  tokens: () => ({
    grey: {
      100: '#333',
      300: '#666',
      700: '#999'
    }
  })
}));

// Helper function to render the Dashboard
const renderDashboard = () => {
  return render(
    <BrowserRouter>
      <Dashboard />
    </BrowserRouter>
  );
};

describe('Dashboard Component', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders section headings correctly', () => {
    renderDashboard();
    expect(screen.getByText('Check Our Upcoming Events!')).toBeInTheDocument();
    expect(screen.getByText('Latest Trending Societies!')).toBeInTheDocument();
  });

  it('displays society and event data', () => {
    renderDashboard();
    expect(screen.getByText('Chess Club')).toBeInTheDocument();
    expect(screen.getByText('Debate Society')).toBeInTheDocument();
    expect(screen.getByText('Event 1')).toBeInTheDocument();
    expect(screen.getByText('Event 2')).toBeInTheDocument();
  });

  it('navigates when clicking on a society card', () => {
    renderDashboard();
    
    // Use the data-testid to find the society card
    const societyCard = screen.getByTestId('society-card-1');
    fireEvent.click(societyCard);
    
    // Check if navigate was called with the correct path
    expect(mockNavigate).toHaveBeenCalledWith('/view-society/1');
  });

  it('renders descriptive text for sections', () => {
    renderDashboard();
    expect(screen.getByText(/Join us for exciting gatherings/)).toBeInTheDocument();
    expect(screen.getByText(/Discover our diverse range of student societies/)).toBeInTheDocument();
  });
});