import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { vi } from 'vitest';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import Support from '../Support';
import { apiClient } from '../../../api';

vi.mock('../../../api', () => ({
  apiClient: {
    post: vi.fn()
  }
}));

vi.mock('@mui/material/useTheme', () => ({
  default: () => createTheme()
}));

describe('Support Page', () => {
  const renderComponent = () => {
    const theme = createTheme();
    return render(
      <ThemeProvider theme={theme}>
        <Support />
      </ThemeProvider>
    );
  };

  const user = userEvent.setup();

  beforeEach(() => {
    vi.resetAllMocks();
  });

  it('renders page title and description', () => {
    renderComponent();

    expect(screen.getByText('Support Centre')).toBeInTheDocument();
    expect(screen.getByText(/Find answers to frequently asked questions/i)).toBeInTheDocument();
  });

  it('renders FAQ sections', () => {
    renderComponent();

    expect(screen.getByText('Frequently Asked Questions')).toBeInTheDocument();
  });

  it('expands and collapses FAQ accordion', async () => {
    renderComponent();

    const firstAccordionHeader = screen.getAllByText('How do I join a society?')[0];
    await user.click(firstAccordionHeader);

    const accordionContent = screen.getByText(/To join a society, navigate to the society's page/);
    expect(accordionContent).toBeVisible();
  });

  it('renders support form', () => {
    renderComponent();

    expect(screen.getByText('Report an Issue')).toBeInTheDocument();
    expect(screen.getByRole('combobox', { name: /report type/i })).toBeInTheDocument();
    expect(screen.getByRole('textbox', { name: /your email/i })).toBeInTheDocument();
    expect(screen.getByRole('textbox', { name: /subject/i })).toBeInTheDocument();
    expect(screen.getByRole('textbox', { name: /describe your issue/i })).toBeInTheDocument();
  });

  it('submits support form successfully', async () => {
    (apiClient.post as any).mockResolvedValue({ data: {} });

    renderComponent();

    const reportTypeSelect = screen.getByRole('combobox', { name: /report type/i });
    const emailInput = screen.getByRole('textbox', { name: /your email/i });
    const subjectInput = screen.getByRole('textbox', { name: /subject/i });
    const messageInput = screen.getByRole('textbox', { name: /describe your issue/i });
    const submitButton = screen.getByText('Submit Report');

    await user.click(reportTypeSelect);
    const queryOption = screen.getByRole('option', { name: /query/i });
    await user.click(queryOption);

    await user.type(emailInput, 'test@example.com');
    await user.type(subjectInput, 'Test Subject');
    await user.type(messageInput, 'Test message');
    await user.click(submitButton);

    await waitFor(() => {
      expect(apiClient.post).toHaveBeenCalledWith('/api/dashboard/public-report', {
        report_type: 'Query',
        email: 'test@example.com',
        subject: 'Test Subject',
        details: 'Test message'
      });
    });

    await waitFor(() => {
      expect(screen.getByText(/Your report has been submitted successfully/i)).toBeInTheDocument();
    });
  });

  it('handles form submission error', async () => {
    (apiClient.post as any).mockRejectedValue(new Error('Submission failed'));

    renderComponent();

    const reportTypeSelect = screen.getByRole('combobox', { name: /report type/i });
    const emailInput = screen.getByRole('textbox', { name: /your email/i });
    const subjectInput = screen.getByRole('textbox', { name: /subject/i });
    const messageInput = screen.getByRole('textbox', { name: /describe your issue/i });
    const submitButton = screen.getByText('Submit Report');

    await user.click(reportTypeSelect);
    const queryOption = screen.getByRole('option', { name: /query/i });
    await user.click(queryOption);

    await user.type(emailInput, 'test@example.com');
    await user.type(subjectInput, 'Test Subject');
    await user.type(messageInput, 'Test message');
    await user.click(submitButton);

    await waitFor(() => {
      expect(screen.getByText(/There was an error submitting your report/i)).toBeInTheDocument();
    });
  });

  it('disables form during submission', async () => {
    (apiClient.post as any).mockImplementation(() => new Promise(() => {}));

    renderComponent();

    const reportTypeSelect = screen.getByRole('combobox', { name: /report type/i });
    const emailInput = screen.getByRole('textbox', { name: /your email/i });
    const subjectInput = screen.getByRole('textbox', { name: /subject/i });
    const messageInput = screen.getByRole('textbox', { name: /describe your issue/i });
    const submitButton = screen.getByText('Submit Report');

    await user.click(reportTypeSelect);
    const queryOption = screen.getByRole('option', { name: /query/i });
    await user.click(queryOption);

    await user.type(emailInput, 'test@example.com');
    await user.type(subjectInput, 'Test Subject');
    await user.type(messageInput, 'Test message');
    await user.click(submitButton);

    await waitFor(() => {
      expect(submitButton).toBeDisabled();
    });
  });

  it('renders email support section', () => {
    renderComponent();

    expect(screen.getByText('Email Support Directly')).toBeInTheDocument();
    const emailLink = screen.getByText('infiniteloop@gmail.com');
    expect(emailLink).toBeInTheDocument();
    expect(emailLink.getAttribute('href')).toBe('mailto:infiniteloop@gmail.com');
  });
});