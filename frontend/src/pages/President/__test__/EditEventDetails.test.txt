import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { vi, describe, it, expect, beforeEach } from 'vitest';
import { MemoryRouter } from 'react-router-dom';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import EditEventDetails from '../EditEventDetails';
import { apiClient } from '../../../api';

// Mock the API calls
vi.mock('../../../api', () => ({
  apiClient: {
    get: vi.fn(),
    patch: vi.fn(),
  },
}));

// Mock the navigate and params
const mockNavigate = vi.fn();
vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom');
  return {
    ...actual,
    useNavigate: () => mockNavigate,
    useParams: () => ({ society_id: '123', eventId: '456' }),
  };
});

// Mock the EventForm component
vi.mock('../../../components/EventForm', () => ({
  EventForm: (props) => (
    <div data-testid="mock-event-form">
      <button 
        type="button" 
        data-testid="submit-button" 
        onClick={() => {
          const formData = new FormData();
          formData.append('title', props.initialData?.title || '');
          props.onSubmit(formData);
        }}
      >
        Submit
      </button>
      <button 
        type="button" 
        data-testid="cancel-button" 
        onClick={props.onCancel}
      >
        Cancel
      </button>
      <div data-testid="form-title">{props.initialData?.title}</div>
    </div>
  ),
}));

// Mock Material UI components to avoid complex rendering issues
vi.mock('@mui/material/Snackbar', () => ({
  default: ({ children, open }) => open ? <div data-testid="snackbar">{children}</div> : null,
}));

vi.mock('@mui/material/Alert', () => ({
  default: ({ children, severity }) => <div data-testid={`alert-${severity}`}>{children}</div>,
}));

vi.mock('@mui/material/CircularProgress', () => ({
  default: () => <div data-testid="loading-spinner">Loading...</div>,
}));

vi.mock('@mui/material/Box', () => ({
  default: ({ children, display }) => <div data-testid="mui-box" style={{ display }}>{children}</div>,
}));

const theme = createTheme();

describe('EditEventDetails Component', () => {
  const mockEventDetail = {
    id: 456,
    title: 'Annual Conference',
    main_description: 'Society annual conference with industry speakers',
    location: 'Main Hall',
    date: '2025-06-15',
    start_time: '14:00:00',
    duration: '03:00:00',
    status: 'Approved',
    extra_modules: [],
    participant_modules: [],
  };

  beforeEach(() => {
    vi.clearAllMocks();
    
    // Reset mocks
    (apiClient.get as any).mockResolvedValue({ data: mockEventDetail, status: 200 });
    (apiClient.patch as any).mockResolvedValue({ data: { success: true }, status: 200 });
    
    // Mock setTimeout
    vi.useFakeTimers();
  });

  afterEach(() => {
    vi.restoreAllMocks();
    vi.useRealTimers();
  });

  const renderComponent = () => {
    return render(
      <ThemeProvider theme={theme}>
        <MemoryRouter initialEntries={[`/president-page/123/edit-event-details/456`]}>
          <EditEventDetails />
        </MemoryRouter>
      </ThemeProvider>
    );
  };

  it('shows loading state initially and fetches data', async () => {
    renderComponent();
    
    // Check for loading spinner
    expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();
    
    // Advance all timers to complete API call and rendering
    vi.runAllTimers();
    
    // Wait for form to appear
    expect(await screen.findByTestId('mock-event-form')).toBeInTheDocument();
    
    // Verify API was called
    expect(apiClient.get).toHaveBeenCalledWith('/api/events/456/manage/');
    
    // Verify data is displayed
    expect(screen.getByTestId('form-title').textContent).toBe('Annual Conference');
  });

  it('handles API error when fetching data', async () => {
    // Mock API error
    (apiClient.get as any).mockRejectedValueOnce(new Error('Event not found'));
    
    renderComponent();
    
    // Advance all timers
    vi.runAllTimers();
    
    // Error should be displayed
    expect(await screen.findByText('Failed to load event data')).toBeInTheDocument();
  });

  it('submits form and navigates back on success', async () => {
    renderComponent();
    
    // Advance timers to complete initial loading
    vi.runAllTimers();
    
    // Wait for form to appear
    const submitButton = await screen.findByTestId('submit-button');
    
    // Submit the form
    fireEvent.click(submitButton);
    
    // Verify API call
    expect(apiClient.patch).toHaveBeenCalledWith(
      '/api/events/456/manage/',
      expect.any(FormData)
    );
    
    // Advance timers for snackbar
    vi.advanceTimersByTime(100);
    
    // Advance timers for navigation
    vi.advanceTimersByTime(2000);
    
    // Verify navigation was called
    expect(mockNavigate).toHaveBeenCalledWith(-1);
  });

  it('shows error message on submit failure', async () => {
    // Mock API error
    (apiClient.patch as any).mockRejectedValueOnce(new Error('Update failed'));
    
    renderComponent();
    
    // Advance timers to complete initial loading
    vi.runAllTimers();
    
    // Wait for form to appear
    const submitButton = await screen.findByTestId('submit-button');
    
    // Submit the form
    fireEvent.click(submitButton);
    
    // Advance timers for snackbar
    vi.advanceTimersByTime(100);
    
    // Navigation should NOT be called
    expect(mockNavigate).not.toHaveBeenCalled();
  });

  it('cancels editing and navigates back', async () => {
    renderComponent();
    
    // Advance timers to complete initial loading
    vi.runAllTimers();
    
    // Wait for form to appear
    const cancelButton = await screen.findByTestId('cancel-button');
    
    // Click cancel
    fireEvent.click(cancelButton);
    
    // Verify navigation was called
    expect(mockNavigate).toHaveBeenCalledWith(-1);
  });
});