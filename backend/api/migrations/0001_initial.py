# Generated by Django 4.2.18 on 2025-03-14 19:39

import api.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='6-30 chars. Letters, digits, underscores, hyphens, and dots only.', max_length=30, unique=True, validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(30), django.core.validators.RegexValidator(code='invalid_username', message='Usernames must only contain letters, numbers, underscores, hyphens, or dots.', regex='^[a-zA-Z0-9_.-]+$')])),
                ('first_name', models.CharField(default='first', max_length=50)),
                ('last_name', models.CharField(default='last', max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('role', models.CharField(choices=[('student', 'Student'), ('admin', 'Admin')], default='student', max_length=50)),
                ('following', models.ManyToManyField(blank=True, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('first_name', 'last_name'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.CharField(choices=[('Bronze', 'Bronze'), ('Silver', 'Silver'), ('Gold', 'Gold')], default='Bronze', max_length=10)),
                ('is_custom', models.BooleanField(default=False)),
                ('title', models.CharField(default='default_title', max_length=20)),
                ('description', models.CharField(default='default_description', max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('introduction_title', models.CharField(default='Welcome to the Universal Student Society Platform!', help_text='The title of the website introduction section.', max_length=255, verbose_name='Introduction Title')),
                ('introduction_content', models.TextField(default="This platform is designed to help student societies manage their members, share news, organize events, and much more. Whether you're a small club or a large society, we provide the tools you need to connect with your members and thrive.\n\nKey features include: membership management, event calendars, news feeds, notifications, and customizable society pages. Get started by registering your society or logging in!", help_text='The main content of the website introduction. Use newlines to separate paragraphs.', verbose_name='Introduction Content')),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='Society',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=30)),
                ('description', models.CharField(default='default', max_length=500)),
                ('status', models.CharField(choices=[('Pending', 'Pending Approval'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('category', models.CharField(default='General', max_length=50)),
                ('social_media_links', models.JSONField(blank=True, default=dict, help_text='Dictionary with keys: WhatsApp, Facebook, Instagram, X, Other - each with a URL value')),
                ('membership_requirements', models.TextField(blank=True, null=True)),
                ('upcoming_projects_or_plans', models.TextField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='society_icons/')),
            ],
        ),
        migrations.CreateModel(
            name='SocietyRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent', models.CharField(choices=[('CreateSoc', 'Create Society'), ('UpdateSoc', 'Update Society'), ('CreateEve', 'Create Event'), ('UpdateEve', 'Update Event'), ('CreateUse', 'Create User'), ('UpdateUse', 'Update User'), ('JoinSoc', 'Join Society')], max_length=10)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, default='', max_length=30)),
                ('description', models.CharField(blank=True, default='', max_length=500)),
                ('roles', models.JSONField(blank=True, default=dict)),
                ('category', models.CharField(blank=True, default='', max_length=50)),
                ('social_media_links', models.JSONField(blank=True, default=dict, null=True)),
                ('membership_requirements', models.TextField(blank=True, default='')),
                ('upcoming_projects_or_plans', models.TextField(blank=True, default='')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='icon_request/')),
                ('society', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='society_request', to='api.society')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('api.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('status', models.CharField(choices=[('Pending', 'Pending Approval'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('major', models.CharField(blank=True, max_length=50)),
                ('is_president', models.BooleanField(default=False)),
                ('is_vice_president', models.BooleanField(default=False)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='student_icons/')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('api.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SocietyShowreelRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='society_showreel_request/')),
                ('caption', models.CharField(blank=True, default='', max_length=50)),
                ('society', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showreel_images_request', to='api.societyrequest')),
            ],
        ),
        migrations.CreateModel(
            name='SocietyShowreel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='society_showreel/')),
                ('caption', models.CharField(blank=True, default='', max_length=50)),
                ('society', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showreel_images', to='api.society')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=20)),
                ('description', models.CharField(default='', max_length=300)),
                ('date', models.DateField(default=api.models.get_date)),
                ('start_time', models.TimeField(default=api.models.get_time)),
                ('duration', models.DurationField(default=datetime.timedelta(seconds=3600))),
                ('location', models.CharField(default='', max_length=300)),
                ('max_capacity', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('Pending', 'Pending Approval'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('hosted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='api.society')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('dislikes', models.ManyToManyField(blank=True, related_name='disliked_comments', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.event')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent', models.CharField(choices=[('CreateSoc', 'Create Society'), ('UpdateSoc', 'Update Society'), ('CreateEve', 'Create Event'), ('UpdateEve', 'Update Event'), ('CreateUse', 'Create User'), ('UpdateUse', 'Update User'), ('JoinSoc', 'Join Society')], max_length=10)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('major', models.CharField(blank=True, default='', max_length=50)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='icon_request/')),
                ('from_student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='api.student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='student',
            name='attended_events',
            field=models.ManyToManyField(blank=True, related_name='attendees', to='api.event'),
        ),
        migrations.AddField(
            model_name='student',
            name='president_of',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='president', to='api.society'),
        ),
        migrations.AddField(
            model_name='student',
            name='societies',
            field=models.ManyToManyField(blank=True, related_name='members', to='api.society'),
        ),
        migrations.AddField(
            model_name='societyrequest',
            name='from_student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='api.student'),
        ),
        migrations.AddField(
            model_name='societyrequest',
            name='leader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='society_request_leader', to='api.student'),
        ),
        migrations.AddField(
            model_name='society',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_societies', to='api.admin'),
        ),
        migrations.AddField(
            model_name='society',
            name='event_manager',
            field=models.ForeignKey(blank=True, help_text='Assigned event manager of the society', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_manager_of_society', to='api.student'),
        ),
        migrations.AddField(
            model_name='society',
            name='leader',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='society', to='api.student'),
        ),
        migrations.AddField(
            model_name='society',
            name='society_members',
            field=models.ManyToManyField(blank=True, related_name='societies_belongs_to', to='api.student'),
        ),
        migrations.AddField(
            model_name='society',
            name='vice_president',
            field=models.ForeignKey(blank=True, help_text='Assigned vice-president of the society', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vice_president_of_society', to='api.student'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False)),
                ('message', models.TextField()),
                ('for_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.event')),
                ('for_student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='api.student')),
            ],
        ),
        migrations.CreateModel(
            name='EventRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent', models.CharField(choices=[('CreateSoc', 'Create Society'), ('UpdateSoc', 'Update Society'), ('CreateEve', 'Create Event'), ('UpdateEve', 'Update Event'), ('CreateUse', 'Create User'), ('UpdateUse', 'Update User'), ('JoinSoc', 'Join Society')], max_length=10)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('title', models.CharField(blank=True, default='', max_length=20)),
                ('description', models.CharField(blank=True, default='', max_length=300)),
                ('location', models.CharField(blank=True, default='', max_length=300)),
                ('date', models.DateField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_request', to='api.event')),
                ('hosted_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_request_society', to='api.society')),
                ('from_student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='api.student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='current_attendees',
            field=models.ManyToManyField(blank=True, to='api.student'),
        ),
        migrations.CreateModel(
            name='DescriptionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_description', models.TextField()),
                ('status', models.CharField(choices=[('Pending', 'Pending Approval'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('society', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='description_requests', to='api.society')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='description_requests', to='api.student')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.admin')),
            ],
        ),
        migrations.CreateModel(
            name='AwardStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_awards', to='api.award')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='award_students', to='api.student')),
            ],
        ),
        migrations.CreateModel(
            name='AdminReportRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent', models.CharField(choices=[('CreateSoc', 'Create Society'), ('UpdateSoc', 'Update Society'), ('CreateEve', 'Create Event'), ('UpdateEve', 'Update Event'), ('CreateUse', 'Create User'), ('UpdateUse', 'Update User'), ('JoinSoc', 'Join Society')], max_length=10)),
                ('approved', models.BooleanField(default=False)),
                ('report_type', models.CharField(choices=[('Misconduct', 'Misconduct'), ('System Issue', 'System Issue'), ('Society Issue', 'Society Issue'), ('Event Issue', 'Event Issue'), ('Other', 'Other')], max_length=20)),
                ('subject', models.CharField(max_length=100)),
                ('details', models.TextField()),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('is_from_society_officer', models.BooleanField(default=False)),
                ('from_student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='api.student')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
